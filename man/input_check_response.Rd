% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input_check_response.R
\name{input_check_response}
\alias{input_check_response}
\title{Response to an input check}
\usage{
input_check_response(
  check,
  var_name = NULL,
  error = TRUE,
  prefix = "Input {var_name} is bad:"
)
}
\arguments{
\item{check}{(\code{TRUE} or \code{character()})\cr
Either \code{TRUE} if the check was successful, or an error message else.

This input type matches the return value of the \verb{check*} functions from the
\code{{checkmate}} package.}

\item{var_name}{(\code{NULL} or \code{character(1)})\cr
Optionally specifies the name of the input being checked. This name will be
used as the default value for the \code{prefix} argument.}

\item{error}{(\code{logical(1)})\cr
If \code{check} is not \code{TRUE}, throw an error or return \code{FALSE}?}

\item{prefix}{(\code{character(1)})\cr
A prefix for the thrown error message, if \code{check} is not \code{TRUE} and
\code{error} is \code{TRUE}.}
}
\value{
\code{TRUE} if \code{check} is \code{TRUE}. If \code{check} is not \code{TRUE}, depending on \code{error}:
\itemize{
\item If \code{error} is \code{TRUE}, throws an error.
\item If \code{error} is \code{FALSE}, returns \code{FALSE}.
}
}
\description{
Provides standardized responses to input checks, ensuring consistency.
}
\examples{
x <- "1"
y <- 1

### check is successful
input_check_response(
  check = checkmate::check_character(x),
  var_name = "x",
  error = TRUE
)

### standardized check response
\dontrun{
input_check_response(
  check = checkmate::check_character(y),
  var_name = "y",
  error = TRUE
)
}

}
\concept{package helpers}
\keyword{packaging}
